100. Using PHP, construct a program to restrict the user from uploading the same file again and again.
If the same file already exists in that folder, display an appropriate error message.
<?php
$upload_dir = "uploads/";

// Create the upload directory if it does not exist
if (!is_dir($upload_dir)) {
    mkdir($upload_dir, 0777, true);
}

$upload_msg = "";

if (isset($_POST['upload'])) {
    $file_name = $_FILES['file']['name'];
    $file_tmp = $_FILES['file']['tmp_name'];

    // Check if file already exists
    if (file_exists($upload_dir . $file_name)) {
        $upload_msg = "Error: The file '$file_name' already exists!";
    } else {
        // Move uploaded file to the folder
        if (move_uploaded_file($file_tmp, $upload_dir . $file_name)) {
            $upload_msg = "File '$file_name' uploaded successfully.";
        } else {
            $upload_msg = "Error: Failed to upload the file.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>File Upload with Duplicate Restriction</title>
</head>
<body>
<h2>Upload a File</h2>

<form method="post" enctype="multipart/form-data">
    Select file to upload: <input type="file" name="file" required>
    <button type="submit" name="upload">Upload</button>
</form>

<p style="color:red;"><?php echo $upload_msg; ?></p>

<!-- Display list of uploaded files -->
<?php
$files = scandir($upload_dir);
if(count($files) > 2) { // Exclude '.' and '..'
    echo "<h3>Uploaded Files:</h3><ul>";
    foreach($files as $file) {
        if($file != "." && $file != "..") {
            echo "<li>$file</li>";
        }
    }
    echo "</ul>";
}
?>
</body>
</html>
